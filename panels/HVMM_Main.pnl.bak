V 14
1
LANG:1 0 
PANEL,-1 -1 1920 1100 N "_3DFace" 0
"#uses \"HVMMGeneral.ctl\"
main()
{
currentLayer(1);

string setupMode;

for(int i=1;i<=8;i++)
{
  dpGet(\"N\"+i+\".Mode\",setupMode);
  if(setupMode!=\"\")
    break;
}

bool enabledNode;
string chamberOfNode,mtf;


// --------------------------------- ValidationQA Mode ----------------------------------------------------------------------
 
if(setupMode==\"ValidationQA\")
    {

    
  validationButton.enabled(FALSE);
  cosmicsButton.enabled(TRUE);
  saveButton.enabled(FALSE);
  int x=200;
  
  //Extra  ---- Start
      dyn_string extraObject;

      extraObject=makeDynString(\"extraFrame\",\"envText\",\"envSwitch\",\"gasText\",\"gasSwitch\",\"humidotyText\",\"humiditySwitch\",\"gifText\",\"gifSwitch\",\"extraRectangle\");
      
      for(int i=1;i<=dynlen(extraObject);i++)
      {
        setValue(extraObject[i],\"visible\",TRUE);
      }
  //Extra  ---- END
  
  if(frameSector1.visible())
  {
    for(int i=1;i<=8;i++)
    {
      removeSymbol(myModuleName(), myPanelName(), \"Node\"+i);
    }
    frameSector1.visible(FALSE);
    frameSector2.visible(FALSE);
    
    frameIP1.visible(FALSE); 
    textIP1.visible(FALSE);
    frameHO1.visible(FALSE);
    textHO1.visible(FALSE);
    
    frameIP2.visible(FALSE); 
    textIP2.visible(FALSE);
    frameHO2.visible(FALSE);
    textHO2.visible(FALSE);
    
  }
  
// Node Operation -->  
  
  for(int i=1;i<=4;i++)
  {     
    addSymbol(myModuleName(), myPanelName(), \"objects/nodeSetup.pnl\", \"Node\"+i,
               makeDynString(\"$node:\"+i,\"$mode:\"+\"Validation\"), x, 240, 0, 1, 1);
    x=x+350;
   
  }
  
  bool overviewFlag=FALSE;
   for(int i=1;i<=4;i++)
  {
     
       dpGet(\"N\"+i+\".Enabled\",enabledNode);
    if(enabledNode)
    {  
        overviewFlag=TRUE; 
        dpGet(\"N\"+i+\".ChamberType\",chamberOfNode);
        dpGet(\"N\"+i+\".BatchId\",mtf);
        RootPanelOnModule(\"empty.pnl\", \"about\", \"embModuleN\"+i, \"\"); 
        delay(3);
        RootPanelOnModule(\"objects/nodeOperation.pnl\", \"N\"+i, \"embModuleN\"+i, makeDynString(\"$node:\"+i,\"$mode:\"+setupMode,\"$type:\"+chamberOfNode,\"$sector:\"+\"0\"));  
        setValue(\"buttonN\"+i,\"visible\",TRUE);
        setValue(\"buttonN\"+i,\"text\",\"Node \"+i+\"-\"+chamberOfNode);
        DebugN(\"Node: \"+i,\" | Chamber Type: \"+chamberOfNode,\" | Mode: \"+setupMode,\" | MTF: \"+mtf,\" --------> READY!\");
     } 
  }
// <---   
  

  
     if(overviewFlag)
  {
     buttonOverview.visible(TRUE); 
     buttonOverview.enabled(FALSE);
     RootPanelOnModule(\"empty.pnl\", \"about\", \"embModuleOverview\", \"\"); 
     delay(3);
     RootPanelOnModule(\"objects/nodeOverviewValidationHolder.pnl\", \"Overview\", \"embModuleOverview\", makeDynString());  
     buttonOverview.enabled(TRUE);
     
     
   }
  

}//if validation

// --------------------------------- Cosmics Mode ----------------------------------------------------------------------
 
if(setupMode==\"CosmicsBasic\" || setupMode==\"CosmicsExtra\")
      {

    //Extra  ---- Start
      dyn_string extraObject;

      extraObject=makeDynString(\"extraFrame\",\"envText\",\"envSwitch\",\"gasText\",\"gasSwitch\",\"humidotyText\",\"humiditySwitch\",\"extraRectangle\");
      
      for(int i=1;i<=dynlen(extraObject);i++)
      {
        setValue(extraObject[i],\"visible\",TRUE);
      }
  //Extra  ---- END
      
  
  cosmicsButton.enabled(FALSE);
  validationButton.enabled(TRUE);
  saveButton.enabled(FALSE);
  
   int x=200;
   int y=240;
   frameSector1.visible(TRUE);
   
   frameIP1.visible(TRUE); 
   textIP1.visible(TRUE);
   frameHO1.visible(TRUE);
   textHO1.visible(TRUE);
   
  for(int i=1;i<=4;i++)
  { 
    addSymbol(myModuleName(), myPanelName(), \"objects/nodeSetup.pnl\", \"Node\"+i,
               makeDynString(\"$node:\"+i,\"$mode:\"+\"Cosmics\"), x, y, 0, 1, 1);
    x=x+350;
  }
   
   x=200;
   y=y+280;
   frameSector2.visible(TRUE);
   
   frameIP2.visible(TRUE); 
   textIP2.visible(TRUE);
   frameHO2.visible(TRUE);
   textHO2.visible(TRUE);
   for(int i=5;i<=8;i++)
  { 
    addSymbol(myModuleName(), myPanelName(), \"objects/nodeSetup.pnl\", \"Node\"+i,
               makeDynString(\"$node:\"+i,\"$mode:\"+\"Cosmics\"), x, y, 0, 1, 1);
    x=x+350;
  }
  
   int counterEnabledCosmics=0;
  for(int i=1;i<=8;i++)
   {
     dpGet(\"N\"+i+\".Enabled\",enabledNode);
     if(enabledNode)
       counterEnabledCosmics=counterEnabledCosmics+i;

     if(counterEnabledCosmics==10)
     {
       counterEnabledCosmics=0;
       RootPanelOnModule(\"empty.pnl\", \"about\", \"embModuleN\"+\"1\", \"\"); 
       delay(1);
       RootPanelOnModule(\"objects/nodeOperation.pnl\", \"N\"+\"1\", \"embModuleN\"+\"1\", makeDynString(\"$node:\"+\"1\",\"$mode:\"+setupMode,\"$type:\"+\"\",\"$sector:\"+\"1\"));
       setValue(\"buttonN\"+\"1\",\"visible\",TRUE);
       setValue(\"buttonN\"+\"1\",\"text\",\"Sector \"+\"1\");
     }
     if(counterEnabledCosmics==26)
     {
       RootPanelOnModule(\"empty.pnl\", \"about\", \"embModuleN\"+\"2\", \"\"); 
       delay(1);
       RootPanelOnModule(\"objects/nodeOperation.pnl\", \"N\"+\"2\", \"embModuleN\"+\"2\", makeDynString(\"$node:\"+\"2\",\"$mode:\"+setupMode,\"$type:\"+\"\",\"$sector:\"+\"2\"));
       setValue(\"buttonN\"+\"2\",\"visible\",TRUE);
       setValue(\"buttonN\"+\"2\",\"text\",\"Sector \"+\"2\");
     } 
       
   }
   
   
}//if cosmics

  
  
}" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "void enabledAllTabButtons()
{
  
for(int i=1;i<=4;i++)
{
setValue(\"buttonN\"+i,\"enabled\",TRUE);
}
buttonOverview.enabled(TRUE);
buttonSettings.enabled(TRUE);
buttonSetup.enabled(TRUE);

this.enabled(FALSE);
  
}

bool chechIfUserHasTypeBatch()
{
  
  int counterNodes;
  if(!validationButton.enabled())  
  {
    counterNodes=4;
  }
  if(!cosmicsButton.enabled())  
  {
    counterNodes=8;
  }  
  
  bool isNodeOn;
  string batch;
  int counterEnabledNodes=0;
  int counterBatch=0;
 for(int i=1;i<=counterNodes;i++) // chech nodes
  {
  getValue(\"enableButton\"+\"_N\"+i,\"checked\",isNodeOn);  // check enabled nodes
  if(isNodeOn) 
  {
       counterEnabledNodes++;
       getValue(\"mtfField\"+\"_N\"+i,\"text\",batch);       
       if(strlen(batch)==14)
       {
         counterBatch++;
        continue;      
       }
       else
       {
      setValue(\"mtfField\"+\"_N\"+i,\"backCol\",\"red\");
      delay(0,200);
      setValue(\"mtfField\"+\"_N\"+i,\"backCol\",\"_Window\");
         continue;
         
       }
    
    
  }
  
}
  
  if(counterEnabledNodes==counterBatch && counterEnabledNodes>0)
  {
    return TRUE;  
  }
 else
  {
    return FALSE;
  }
  
  
}

" 0
 4
"CBRef" "1"
"EClose" "main()
{
  int i;
}" 0

"windowIcon" "NTUA Logo/logo[80].png"
"dpi" "96"
0 1 9 9 9 9 1 6
""
DISPLAY_LAYER, 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
LAYER, 0 
1
LANG:1 0 
6 122
"extraRectangle"
""
1 190 240 E E E 1 E 0 E N {0,0,0} E N "WF_PanelBackground" E E
 E E
121 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E -1 1 3 2 1 E 0.8000000000000002 0 0.4375000000000001 488.9999999999999 622 1 E 190 240 780 400
6 119
"RECTANGLE1"
""
1 190 240 E E E 1 E 1 E N {0,0,0} E N "WF_PanelBackground" E E
 E E
118 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E -1 1 3 2 1 E 0.6745762711864408 0 0.2625 247.8305084745762 80 1 E 190 240 780 400
2 76
"PRIMITIVE_TEXT14"
""
1 400.2499999999999 150.7916666666666 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
75 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E U  0 E 400.2499999999999 150.7916666666666 467 176
0 2 2 "0s" 0 0 0 192 0 0  400.2499999999999 150.7916666666666 1
1
LANG:1 27 Utopia,-1,21,5,75,0,0,0,0,0
0 1
LANG:1 6 Mode :
30 77
"FRAME10"
""
1 370 133 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
76 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 0.784313725490196 0 0.8059701492537314 85.80392156862752 25.80597014925372 0 E 370 133 881 201
1
LANG:1 27 Utopia,-1,15,5,75,0,0,0,0,0
0 1
LANG:1 11 Select Mode
13 78
"validationButton"
""
1 485.5312500000001 160 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
77 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,19,5,75,0,0,0,0,0
0  483.5312499999997 147.5 607.5312499999999 181.5

T 
1
LANG:1 10 Validation
"main(mapping event)
{
  this.enabled(FALSE);
  

  cosmicsButton.enabled(TRUE);
  saveButton.enabled(FALSE);
  int x=200;
  
  if(frameSector1.visible())
  {
    for(int i=1;i<=8;i++)
    {
      removeSymbol(myModuleName(), myPanelName(), \"Node\"+i);
    }
    frameSector1.visible(FALSE);
    frameSector2.visible(FALSE);
    
    frameIP1.visible(FALSE); 
    textIP1.visible(FALSE);
    frameHO1.visible(FALSE);
    textHO1.visible(FALSE);
    
    frameIP2.visible(FALSE); 
    textIP2.visible(FALSE);
    frameHO2.visible(FALSE);
    textHO2.visible(FALSE);
    
  }
  
  for(int i=1;i<=4;i++)
  { 
    addSymbol(myModuleName(), myPanelName(), \"objects/nodeSetup.pnl\", \"Node\"+i,
               makeDynString(\"$node:\"+i,\"$mode:\"+\"Validation\"), x, 240, 0, 1, 1);
    x=x+350;
  }
  
      dyn_string extraObject;

      extraObject=makeDynString(\"extraFrame\",\"envText\",\"envSwitch\",\"gasText\",\"gasSwitch\",\"humidotyText\",\"humiditySwitch\",\"gifText\",\"gifSwitch\",\"extraRectangle\");
      
      for(int i=1;i<=dynlen(extraObject);i++)
      {
        setValue(extraObject[i],\"visible\",TRUE);
      }
  
}" 0
 E E E
13 79
"cosmicsButton"
""
1 630 160 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
78 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,19,5,75,0,0,0,0,0
0  627.9999999999997 147.5 751.9999999999995 181.5

T 
1
LANG:1 7 Cosmics
"main(mapping event)
{
 

    
  if(!validationButton.enabled())
  {
   for(int i=1;i<=4;i++)
    {
      removeSymbol(myModuleName(), myPanelName(), \"Node\"+i);
    } 
    
  }
  
  
  this.enabled(FALSE);
  
  
  validationButton.enabled(TRUE);
  saveButton.enabled(FALSE);
  
   int x=200;
   int y=240;
   frameSector1.visible(TRUE);
   
   frameIP1.visible(TRUE); 
   textIP1.visible(TRUE);
   frameHO1.visible(TRUE);
   textHO1.visible(TRUE);
   
  for(int i=1;i<=4;i++)
  { 
    addSymbol(myModuleName(), myPanelName(), \"objects/nodeSetup.pnl\", \"Node\"+i,
               makeDynString(\"$node:\"+i,\"$mode:\"+\"Cosmics\"), x, y, 0, 1, 1);
    x=x+350;
  }
   
   x=200;
   y=y+280;
   frameSector2.visible(TRUE);
   
   frameIP2.visible(TRUE); 
   textIP2.visible(TRUE);
   frameHO2.visible(TRUE);
   textHO2.visible(TRUE);
   for(int i=5;i<=8;i++)
  { 
    addSymbol(myModuleName(), myPanelName(), \"objects/nodeSetup.pnl\", \"Node\"+i,
               makeDynString(\"$node:\"+i,\"$mode:\"+\"Cosmics\"), x, y, 0, 1, 1);
    x=x+350;
  }
   
      dyn_string extraObject;

      extraObject=makeDynString(\"extraFrame\",\"envText\",\"envSwitch\",\"gasText\",\"gasSwitch\",\"humidotyText\",\"humiditySwitch\",\"extraRectangle\");

      for(int i=1;i<=dynlen(extraObject);i++)
      {
        setValue(extraObject[i],\"visible\",TRUE);
      }
       gifText.visible(FALSE);
       gifSwitch.visible(FALSE);
}" 0
 E E E
30 80
"frameSector1"
""
1 200 183 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
79 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 0.9517241379310345 0 1.07373271889401 -20.34482758620689 -6.493087557603861 0 E 200 183 1651 401
1
LANG:1 27 Utopia,-1,27,5,75,0,0,0,0,0
0 1
LANG:1 9 Sector #1
30 81
"frameSector2"
""
1 200 183 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
80 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 0.9517241379310345 0 1.092165898617512 -20.34482758620686 270.1336405529954 0 E 200 183 1651 401
1
LANG:1 27 Utopia,-1,27,5,75,0,0,0,0,0
0 1
LANG:1 9 Sector #2
13 82
"saveButton"
""
1 775.9999999999998 890.5416666666665 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
81 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,29,5,75,0,0,0,0,0
0  773.9999999999994 867.9999999999993 967.9999999999994 920.333333333333

T 
1
LANG:1 4 Save
"main(mapping event)
{
  
    string archiveClassName = \"TBSCS_Archive\";
    int archiveType = DPATTR_ARCH_PROC_SIMPLESM;
    int smoothProcedure = DPATTR_TIME_AND_VALUE_SMOOTH;
    dyn_string exceptionInfo;
    bool checkClass = TRUE;
    float deadband;
    float timeInterval;
    
        // Extra Mode Setup ------ Start
    
    if(envSwitch.checked())
      dpSet(\"ALL.ExtraMode.Env\",1);
    else
      dpSet(\"ALL.ExtraMode.Env\",0);      
    if(gasSwitch.checked())
      dpSet(\"ALL.ExtraMode.Gas\",1); 
    else   
      dpSet(\"ALL.ExtraMode.Gas\",0); 
    if(humiditySwitch.checked())
      dpSet(\"ALL.ExtraMode.MMHumidity\",1);
    else
      dpSet(\"ALL.ExtraMode.MMHumidity\",0);
    if(gifSwitch.checked())
      dpSet(\"ALL.ExtraMode.GIF\",1);
    else    
      dpSet(\"ALL.ExtraMode.GIF\",0);  
    // Extra Mode Setup ------ END  
    
  
  
  
   
  int counterNodes;
  int countCosmics=0;
  if(!validationButton.enabled())  
  {
    counterNodes=4;
  }
  if(!cosmicsButton.enabled())  
  {
    counterNodes=8;
  }  
  
  if(chechIfUserHasTypeBatch())
    {
    
  bool isNodeOn,isSM1,isSM2,isLM1,isLM2,cosmicsModeLayer,cosmicsModeSector;
  string chamberOfNode,mode,mtf;
  
  for(int i=1;i<=counterNodes;i++) // chech nodes
  {
  getValue(\"enableButton\"+\"_N\"+i,\"checked\",isNodeOn);  // check enabled nodes
  if(isNodeOn) 
  {
    mode=chamberOfNode=\"\";
    //retrieve chamber type
    
    getValue(\"buttonSM1\"+\"_N\"+i,\"enabled\",isSM1);
    if(!isSM1)
    { chamberOfNode=\"SM1\";}   
    getValue(\"buttonSM2\"+\"_N\"+i,\"enabled\",isSM2);  
      if(!isSM2)
    {chamberOfNode=\"SM2\";  }
    getValue(\"buttonLM1\"+\"_N\"+i,\"enabled\",isLM1); 
      if(!isLM1)
    {chamberOfNode=\"LM1\"; } 
    getValue(\"buttonLM2\"+\"_N\"+i,\"enabled\",isLM2); 
      if(!isLM2)
    {chamberOfNode=\"LM2\";   } 
      
      getValue(\"mtfField\"+\"_N\"+i,\"text\",mtf);
    

      if(!cosmicsButton.enabled())   
      {
       getValue(\"buttonLayerMode\"+\"_N\"+i,\"enabled\",cosmicsModeLayer);
       getValue(\"buttonSectorMode\"+\"_N\"+i,\"enabled\",cosmicsModeSector);  
       
       if(!cosmicsModeLayer)
         mode=\"CosmicsBasic\";
       if(!cosmicsModeSector)
         mode=\"CosmicsExtra\";       
      }
      if(!validationButton.enabled())   
        mode=\"ValidationQA\";  
     
    // Final Node Configuration -----------------------------------------------------------------------------------------------------------------  Start -----   
           
     dpSet(\"N\"+i+\".Enabled\",TRUE);                               // Enable Node
     dpSet(\"N\"+i+\".ChamberType\",chamberOfNode);                 //Set Chamber of Node
     dpSet(\"N\"+i+\".Mode\",mode);                                 // Set Mode of Node
     dpSet(\"N\"+i+\".BatchId\",mtf);                              // Set MTF of Node
     
    // Final Node Configuration -----------------------------------------------------------------------------------------------------------------  END  ------   
     
//   Set Strips and Drift DPEs for each Node // Sector ******************************************************************
    
  dyn_string stripsToAppend,driftToAppend;
   
  string node=i;  // *i is node  
  
  
  int typeCounter,countGeneral,countLayer,countSector,countChannel;
  string layer,leftRight;
        
   //--------------------------------------- ValidationQA / CosmicsExtra ------------------------------------------Strips/Drift append ---------------START--------- 
  if(mode==\"ValidationQA\" || mode==\"CosmicsExtra\")
  {
       
    // Strips    
  if(chamberOfNode==\"SM1\" || chamberOfNode==\"LM1\")  
    { 
      typeCounter=20;
      countSector=1; 
    } 
  if(chamberOfNode==\"SM2\" || chamberOfNode==\"LM2\")  
    {       
      typeCounter=12;
      countSector=6;      
    }
    
  countGeneral=1;
  countChannel=1;   
  
  layer=\"L\";
  countLayer=1;
  leftRight=\"L\";

    
  for(int k=1;k<=typeCounter;k++)
  {
    if(countGeneral==(typeCounter+4)/4)
    {
     countGeneral=1;
     if(chamberOfNode==\"SM1\" || chamberOfNode==\"LM1\")  
       countSector=1;
     if(chamberOfNode==\"SM2\" || chamberOfNode==\"LM2\")
       countSector=6; 
     
     countLayer++;
    }      
      
    leftRight=\"L\";
    stripsToAppend[countChannel]=layer+countLayer+leftRight+countSector;
    countChannel++;    
    leftRight=\"R\";
    stripsToAppend[countChannel]=layer+countLayer+leftRight+countSector;
    countChannel++;    
    countSector++;    
    countGeneral++;
    
  }
    
  // Drift 
      layer=\"L\";
      countLayer=1;
      
      for(int k=1;k<=4;k++)
      {        
       driftToAppend[k]=layer+countLayer+\"D\";
        countLayer++;  
       
     }
   
  }//if val or cosmics extra

   //--------------------------------------- ValidationQA / CosmicsExtra ------------------------------------------Strips/Drift append ---------------END---------   
  
   //---------------------------------------    CosmicsBasic             ------------------------------------------Strips/Drift append ---------------Start---------   
  
  if(mode==\"CosmicsBasic\")
  {
      
    layer=\"L\";
    countLayer=1;
    for(int k=1;k<=4;k++)
    {
      stripsToAppend[k]=layer+countLayer+\"S\";
      countChannel++;
     
     countLayer++; 
    }
 // Drift Cosmics MM

   
    driftToAppend[1]=\"D\";

 
   
  } // if CosmicsBasic
 

   //---------------------------------------    CosmicsBasic             ------------------------------------------Strips/Drift append ---------------END---------   
  
  
    // Final Node Configuration -----------------------------------------------------------------------------------------------------------------  Start -----   
  
  // dpSet Strips/Drift per enabled Node 
   dpSet(\"N\"+i+\".Mapping.ChannelsTotal.Strips\",stripsToAppend);   // Append Strips Channels  
   dpSet(\"N\"+i+\".Mapping.ChannelsTotal.Drift\",driftToAppend);   // Append Drift Channels
       
   DebugN(\"Node: \"+i,\" | Chamber Type: \"+chamberOfNode,\" | Mode: \"+mode,\" | MTF: \"+mtf,\" --------> READY!\");

 if(mode==\"ValidationQA\")
   {
   RootPanelOnModule(\"empty.pnl\", \"about\", \"embModuleN\"+i, \"\"); 
   delay(1);
   RootPanelOnModule(\"objects/nodeOperation.pnl\", \"N\"+i, \"embModuleN\"+i, makeDynString(\"$node:\"+i,\"$mode:\"+mode,\"$type:\"+chamberOfNode,\"$sector:\"+\"0\"));  
   setValue(\"buttonN\"+i,\"visible\",TRUE);
   setValue(\"buttonN\"+i,\"text\",\"Node \"+i+\"-\"+chamberOfNode);
   
   
   // Archive ------------------------- Start
   
   dyn_string archivedDpes,archivedChannel;
   dynClear(archivedDpes);
   dynAppend(archivedDpes,stripsToAppend);
   dynAppend(archivedDpes,driftToAppend);
   
 for (int h = 1; h<=dynlen(archivedDpes); h++) {  
   
        dpGet(\"N\"+i+\".Mapping.\"+archivedDpes[h]+\".Channel\",archivedChannel[h]);   
   
        deadband = 0.1;      // Change these settings to adjust the detail
        timeInterval = 1;    // of vMon archiving.   
        fwArchive_configMultiple(\"CAEN/\"+archivedChannel[h] + \".actual.vMon\", archiveClassName, archiveType, smoothProcedure,
                          deadband, timeInterval, exceptionInfo, checkClass);
        if (dynlen(exceptionInfo)>0) DebugN(exceptionInfo);   
 
        deadband = 0.5;        // Change these settings to adjust the detail
        timeInterval = 1;    // of iMon archiving.
        
        fwArchive_configMultiple(\"CAEN/\"+archivedChannel[h] + \".actual.iMon\", archiveClassName, archiveType, smoothProcedure,
                          deadband, timeInterval, exceptionInfo, checkClass);
        if (dynlen(exceptionInfo)>0) DebugN(exceptionInfo);
             
 }
   
   for (int z = 1; z <= dynlen(archivedChannel); z++) {
        fwArchive_startMultiple(\"CAEN/\"+archivedChannel[z] + \".actual.vMon\", exceptionInfo);
        if (dynlen(exceptionInfo) > 0) DebugN(exceptionInfo);
        fwArchive_startMultiple(\"CAEN/\"+archivedChannel[z] + \".actual.iMon\", exceptionInfo);
        if (dynlen(exceptionInfo) > 0) DebugN(exceptionInfo);     
               
   }  
   
   
      //Extra Archive
       bool isEnvOn,isGasOn,isHumOn,isGifOn;
    if(envSwitch.checked())
        isEnvOn=TRUE;
    if(gasSwitch.checked())
        isGasOn=TRUE;
    if(humiditySwitch.checked())
        isHumOn=TRUE;
    if(gifSwitch.checked())
        isGifOn=TRUE;
    
    dyn_string dpesExtraToArchive;
    if(isGasOn)
    {
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Inlet\");
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Outlet\");      
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Leak\");
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Pressure\");              
     }
    if(isEnvOn)
    {
      dynAppend(dpesExtraToArchive,\"BME280.pressureMean\");       
      dynAppend(dpesExtraToArchive,\"BME280.temperatureMean\");       
      dynAppend(dpesExtraToArchive,\"BME280.humidityMean\");
      dpSet(\"BME280.archiving\",1);      
    }
    if(isHumOn)
    {
      dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Humidity\");        
    }
    if(isGifOn)
    {
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Atmospheric_Pressure\");              
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Humidity_Inside_Bunker\");  
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Humidity_Outside_Bunker\");              
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Temp_Inside_Bunker\");              
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Temp_Outside_Bunker\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.A\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.B\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.C\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.EffectiveAttenuation\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Irradiator.SourceON\");  
      dpSet(\"GIFFPP.archiving\",1);            
    }
    
     for (int h = 1; h<=dynlen(dpesExtraToArchive); h++) { 
        deadband = 0.1;      
        timeInterval = 1;  
      fwArchive_configMultiple(dpesExtraToArchive[h], archiveClassName, archiveType, smoothProcedure,
                          deadband, timeInterval, exceptionInfo, checkClass);
        if (dynlen(exceptionInfo)>0) DebugN(exceptionInfo);
       }
     
    for (int z = 1; z <= dynlen(dpesExtraToArchive); z++) {
        fwArchive_startMultiple(dpesExtraToArchive[z], exceptionInfo);
        if (dynlen(exceptionInfo) > 0) DebugN(exceptionInfo);        
    }  
   
   DebugN(\"*****\");
   DebugN(\"---------------------------- Extra Archive Status \"+i+\" | ON!\");     
   DebugN(\"*****\");
   DebugN(\"---------------------------- HV Archive Status \"+i+\" | ON!\"); 
   dpSet(\"N\"+i+\".Archiving.Status\",1);
   DebugN(\"*****\");
   
   // Archive ------------------------- END  
   
     buttonOverview.visible(TRUE);
     RootPanelOnModule(\"empty.pnl\", \"about\", \"embModuleOverview\", \"\"); 
     delay(3);
     RootPanelOnModule(\"objects/nodeOverviewValidationHolder.pnl\", \"Overview\", \"embModuleOverview\", makeDynString()); 
 }
   
     
     
 if(mode==\"CosmicsBasic\" || mode==\"CosmicsExtra\")
   {
   string sector;
   if((i>0) && (i<5))
     sector=\"1\";
    if((i>4) && (i<9))
     sector=\"2\"; 
   RootPanelOnModule(\"empty.pnl\", \"about\", \"embModuleN\"+sector, \"\"); 
   delay(1);
   RootPanelOnModule(\"objects/nodeOperation.pnl\", \"N\"+sector, \"embModuleN\"+sector, makeDynString(\"$node:\"+sector,\"$mode:\"+mode,\"$type:\"+\"\",\"$sector:\"+sector));
   setValue(\"buttonN\"+sector,\"visible\",TRUE);
   setValue(\"buttonN\"+sector,\"text\",\"Sector \"+sector);
   
   
   // Archive ------------------------- Start
   
   dyn_string archivedDpes,archivedChannel;
   dynClear(archivedDpes);
   dynAppend(archivedDpes,stripsToAppend);
   dynAppend(archivedDpes,driftToAppend);
   
 for (int h = 1; h<=dynlen(archivedDpes); h++) {  
   
        dpGet(\"N\"+i+\".Mapping.\"+archivedDpes[h]+\".Channel\",archivedChannel[h]);   
   
        deadband = 0.1;      // Change these settings to adjust the detail
        timeInterval = 1;    // of vMon archiving.   
        fwArchive_configMultiple(\"CAEN/\"+archivedChannel[h] + \".actual.vMon\", archiveClassName, archiveType, smoothProcedure,
                          deadband, timeInterval, exceptionInfo, checkClass);
        if (dynlen(exceptionInfo)>0) DebugN(exceptionInfo);   
 
        deadband = 0.5;        // Change these settings to adjust the detail
        timeInterval = 1;    // of iMon archiving.
        
        fwArchive_configMultiple(\"CAEN/\"+archivedChannel[h] + \".actual.iMon\", archiveClassName, archiveType, smoothProcedure,
                          deadband, timeInterval, exceptionInfo, checkClass);
        if (dynlen(exceptionInfo)>0) DebugN(exceptionInfo);
             
 }
   
   for (int z = 1; z <= dynlen(archivedChannel); z++) {
        fwArchive_startMultiple(\"CAEN/\"+archivedChannel[z] + \".actual.vMon\", exceptionInfo);
        if (dynlen(exceptionInfo) > 0) DebugN(exceptionInfo);
        fwArchive_startMultiple(\"CAEN/\"+archivedChannel[z] + \".actual.iMon\", exceptionInfo);
        if (dynlen(exceptionInfo) > 0) DebugN(exceptionInfo);     
               
   }  
   
   
      //Extra Archive
       bool isEnvOn,isGasOn,isHumOn,isGifOn;
    if(envSwitch.checked())
        isEnvOn=TRUE;
    if(gasSwitch.checked())
        isGasOn=TRUE;
    if(humiditySwitch.checked())
        isHumOn=TRUE;
    if(gifSwitch.checked())
        isGifOn=TRUE;
    
    dyn_string dpesExtraToArchive;
    if(isGasOn)
    {
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Inlet\");
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Outlet\");      
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Leak\");
       dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Pressure\");              
     }
    if(isEnvOn)
    {
      dynAppend(dpesExtraToArchive,\"BME280.pressureMean\");       
      dynAppend(dpesExtraToArchive,\"BME280.temperatureMean\");       
      dynAppend(dpesExtraToArchive,\"BME280.humidityMean\");
      dpSet(\"BME280.archiving\",1);      
    }
    if(isHumOn)
    {
      dynAppend(dpesExtraToArchive,\"N\"+i+\".Gas.Humidity\");        
    }
    if(isGifOn)
    {
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Atmospheric_Pressure\");              
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Humidity_Inside_Bunker\");  
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Humidity_Outside_Bunker\");              
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Temp_Inside_Bunker\");              
      dynAppend(dpesExtraToArchive,\"GIFFPP.EnvParameters.Temp_Outside_Bunker\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.A\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.B\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.C\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Attenuators.UpStreamPos.EffectiveAttenuation\"); 
      dynAppend(dpesExtraToArchive,\"GIFFPP.Irradiator.SourceON\");  
      dpSet(\"GIFFPP.archiving\",1);            
    }
    
     for (int h = 1; h<=dynlen(dpesExtraToArchive); h++) { 
        deadband = 0.1;      
        timeInterval = 1;  
      fwArchive_configMultiple(dpesExtraToArchive[h], archiveClassName, archiveType, smoothProcedure,
                          deadband, timeInterval, exceptionInfo, checkClass);
        if (dynlen(exceptionInfo)>0) DebugN(exceptionInfo);
       }
     
    for (int z = 1; z <= dynlen(dpesExtraToArchive); z++) {
        fwArchive_startMultiple(dpesExtraToArchive[z], exceptionInfo);
        if (dynlen(exceptionInfo) > 0) DebugN(exceptionInfo);        
    }  
   
   DebugN(\"*****\");
   DebugN(\"---------------------------- Extra Archive Status \"+i+\" | ON!\");     
   DebugN(\"*****\");
   DebugN(\"---------------------------- HV Archive Status \"+i+\" | ON!\"); 
   dpSet(\"N\"+i+\".Archiving.Status\",1);
   DebugN(\"*****\");
   
   // Archive ------------------------- END     
   
   
   
   
   
   }   
   

   
   
    // Final Node Configuration -----------------------------------------------------------------------------------------------------------------  END -----   
   
   } //  if node is on
  
  
  
  } // for 
    
  
  
  } // if batch exists
  else
  {
  DebugN(\"Batch ID is needed!\");
  }
  
  
}" 0
 E E E
30 83
"frameIP1"
""
1 190 233 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
82 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 1.196428571428571 0 1.169491525423728 -47.32142857142856 -62.49152542372853 0 E 190 233 751 411
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 0 
2 86
"textIP1"
""
1 481.2692307692307 401.8461538461538 E E E 1 E 0 E N "FwAtlasBg" E N "WF_PanelBackground" E E
 E E
85 0 0 0 0 0
E E E
0
1
LANG:1 0 

6
"hoverfclr" "N \"FwAtlasBg\""
"hoverbclr" "N \"WF_PanelBackground\""
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 2.554446917208679 0 0.8333333333333314 -725.9566435718189 -111.820512820512 1 E 442 401.8461538461538 520 420
0 2 2 "0s" 0 0 0 193 0 0  481.2692307692307 401.8461538461538 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 8 IP WEDGE
30 90
"frameIP2"
""
1 190 233 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
89 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 1.196428571428571 0 1.169491525423728 -47.32142857142875 220.8418079096048 0 E 190 233 751 411
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 0 
2 94
"textIP2"
""
1 481.2692307692307 401.8461538461538 E E E 1 E 0 E N "FwAtlasBg" E N "WF_PanelBackground" E E
 E E
93 0 0 0 0 0
E E E
0
1
LANG:1 0 

6
"hoverfclr" "N \"FwAtlasBg\""
"hoverbclr" "N \"WF_PanelBackground\""
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 2.554446917208679 0 0.8333333333333314 -724.4768463384862 171.5128205128213 1 E 442 401.8461538461538 520 420
0 2 2 "0s" 0 0 0 193 0 0  481.2692307692307 401.8461538461538 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 8 IP WEDGE
30 95
"frameHO1"
""
1 190 233 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
94 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 1.196428571428571 0 1.169491525423728 631.5605158730158 -62.1581920903953 0 E 190 233 751 411
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 0 
2 96
"textHO1"
""
1 481.2692307692307 401.8461538461538 E E E 1 E 0 E N "FwAtlasBg" E N "WF_PanelBackground" E E
 E E
95 0 0 0 0 0
E E E
0
1
LANG:1 0 

6
"hoverfclr" "N \"FwAtlasBg\""
"hoverbclr" "N \"WF_PanelBackground\""
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 2.554446917208679 0 0.8333333333333314 -47.07469912737452 -111.4871794871788 1 E 437 401.8461538461538 525 420
0 2 2 "0s" 0 0 0 193 0 0  481.2692307692307 401.8461538461538 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 8 HO WEDGE
30 97
"frameHO2"
""
1 190 233 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
96 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 1.196428571428571 0 1.169491525423728 631.5605158730158 219.3033463711433 0 E 190 233 751 411
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 0 
2 98
"textHO2"
""
1 481.2692307692307 401.8461538461538 E E E 1 E 0 E N "FwAtlasBg" E N "WF_PanelBackground" E E
 E E
97 0 0 0 0 0
E E E
0
1
LANG:1 0 

6
"hoverfclr" "N \"FwAtlasBg\""
"hoverbclr" "N \"WF_PanelBackground\""
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 2.554446917208679 0 0.8333333333333314 -47.07469912737452 169.9743589743599 1 E 437 401.8461538461538 525 420
0 2 2 "0s" 0 0 0 193 0 0  481.2692307692307 401.8461538461538 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 8 HO WEDGE
30 101
"extraFrame"
""
1 178 734 E E E 1 E 0 E N "_WindowText" E N {0,0,0} E E
 E E
100 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 1.348800505050505 0 0.4183673469387757 399.91351010101 409.9183673469386 0 E 178 734 531 931
1
LANG:1 27 Utopia,-1,15,5,75,0,0,0,0,0
0 1
LANG:1 5 Extra
29 108
"envSwitch"
""
1 665 758.0000000000001 E E E 1 E 0 E N "white" E N "_3DFace" E E
 E E
107 0 0 0 0 0
E E E
0
1
LANG:1 0 

5
"skin" "enum 3"
"textOff" "string OFF"
"textOn" "string ON"
"backgroundBrushOff" "fill [outline]"
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,27,5,75,0,0,0,0,0
0  664.9999999999999 758 742.9999999999999 782.7777777777781
16 ToggleSwitch.ewo
1
0 "toggled" "(bool on)"
"  if(on)
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\");    
"
"main()
{
  
  if(this.checked())
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\");   
  
  dpConnect(\"EP_setEnabledCB\",\"ALL.ExtraMode.Env:_online.._value\");
}
void EP_setEnabledCB(string dp, bool boNewValue)
{
    setValue(\"\", \"checked\", boNewValue);
}
" 0
2 112
"envText"
""
1 598 736 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
111 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 1.033707865168541 0 1.136363636363639 34.84269662921236 -98.36363636363809 0 E 598 736 683 754
0 2 2 "0s" 0 0 0 192 0 0  598 736 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 10 EnvStation
29 113
"gasSwitch"
""
1 792.7777777777776 760.5606060606065 E E E 1 E 0 E N "white" E N "_3DFace" E E
 E E
112 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"skin" "enum 3"
"textOff" "string OFF"
"textOn" "string ON"
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,27,5,75,0,0,0,0,0
0  792.7777777777776 760.5606060606065 870.7777777777777 785.3383838383843
16 ToggleSwitch.ewo
1
0 "toggled" "(bool on)"
"  if(on)
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\");    
"
"main()
{
    if(this.checked())
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\"); 
  
  dpConnect(\"EP_setEnabledCB\",\"ALL.ExtraMode.Gas:_online.._value\");
}
void EP_setEnabledCB(string dp, bool boNewValue)
{
    setValue(\"\", \"checked\", boNewValue);
}
" 0
2 114
"gasText"
""
1 598 736 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
113 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 1.033707865168541 0 1.136363636363639 185.6204744069898 -95.80303030303175 0 E 598 736 628 754
0 2 2 "0s" 0 0 0 192 0 0  598 736 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 3 Gas
29 115
"humiditySwitch"
""
1 914.9444444444443 760.5606060606066 E E E 1 E 0 E N "white" E N "_3DFace" E E
 E E
114 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"skin" "enum 3"
"textOff" "string OFF"
"textOn" "string ON"
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,27,5,75,0,0,0,0,0
0  914.9444444444442 760.5606060606065 992.944444444444 785.3383838383844
16 ToggleSwitch.ewo
1
0 "toggled" "(bool on)"
"  if(on)
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\");    
"
"main()
{
    if(this.checked())
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\"); 
  
  dpConnect(\"EP_setEnabledCB\",\"ALL.ExtraMode.MMHumidity:_online.._value\");
}
void EP_setEnabledCB(string dp, bool boNewValue)
{
    setValue(\"\", \"checked\", boNewValue);
}
" 0
2 116
"humidotyText"
""
1 598 736 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
115 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 1.033707865168541 0 1.136363636363639 274.7871410736567 -95.80303030303163 0 E 598 736 706 754
0 2 2 "0s" 0 0 0 192 0 0  598 736 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 11 MM Humidity
29 117
"gifSwitch"
""
1 1035.845193508115 760.5606060606066 E E E 1 E 0 E N "white" E N "_3DFace" E E
 E E
116 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"skin" "enum 3"
"textOff" "string OFF"
"textOn" "string ON"
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,27,5,75,0,0,0,0,0
0  1035.845193508115 760.5606060606065 1113.845193508115 785.3383838383844
16 ToggleSwitch.ewo
1
0 "toggled" "(bool on)"
"  if(on)
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\");    
"
"main()
{
  if(this.checked())
    this.foreCol(\"green\");
  else
    this.foreCol(\"red\"); 
  
  dpConnect(\"EP_setEnabledCB\",\"ALL.ExtraMode.GIF:_online.._value\");
}
void EP_setEnabledCB(string dp, bool boNewValue)
{
    setValue(\"\", \"checked\", boNewValue);
}
" 0
2 118
"gifText"
""
1 598 736 E E E 1 E 0 E N "_WindowText" E N "_Window" E E
 E E
117 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 1.033707865168541 0 1.136363636363639 423.6878901373268 -95.80303030303163 0 E 598 736 647 754
0 2 2 "0s" 0 0 0 192 0 0  598 736 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 5 GIF++
30 131
"FRAME3"
""
1 556 767 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
130 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 3 2 1 E 1.125000000000001 0 1.035087719298253 1126.499999999999 -753.9122807017602 0 E 556 767 701 825
1
LANG:1 27 Utopia,-1,12,5,50,0,0,0,0,0
0 1
LANG:1 0 
6 132
"RECTANGLE5"
""
1 1828 1004 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
131 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E -1 1 3 2 1 E 1.084337349397592 0 0.9612832014851266 -162.1686746987976 -916.1283342910665 2  1 0  "pictures/Brookhaven Logo/BNL_bnllogo.gif" 4294967295 E 1828 1004 1911 1034
2 133
"PRIMITIVE_TEXT3"
""
1 1813 75 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
132 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 2 1 3 2 1 E 1 0 0.849444575253555 0 17.16737569096125 0 E 1813 75 1912.846153846154 93.46153846153842
0 2 2 "0s" 0 0 0 192 0 0  1813 75 1
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0 1
LANG:1 12 N.T.U.Athens
7 134
"ELLIPSE5"
""
1 1777 46 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
133 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E -1 1 3 2 1 E 1 0 1 9 27.00000000000057 2  1 0  "pictures/NTUA Logo/rsz_logo[80].png" 4294967295 E 1777 46 24 24
0
LAYER, 1 
1
LANG:1 0 
29 38
"embModuleN1"
""
1 0 26.76396206533193 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
37 0 0 0 0 0
E E E
0
1
LANG:1 0 

9
"newPanelAnimDuration" "int 0"
"oldPanelAnimDuration" "int 0"
"newPanelAnimateOpacity" "bool TRUE"
"oldPanelAnimateOpacity" "bool TRUE"
"newPanelAnimateSize" "bool TRUE"
"oldPanelAnimateSize" "bool TRUE"
"newPanelAnimType" "string TopLeft"
"oldPanelAnimType" "string BottomRight"
"layoutAlignment" "AlignNone"
1
LANG:1 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  0 29 1919 1098
15 Canvas.Canvas.1
0
"main()
{
      this.ModuleName = \"embModuleN1\"; 
}" 0
0
LAYER, 2 
1
LANG:1 0 
29 39
"embModuleN2"
""
1 12 29 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
38 0 0 0 0 0
E E E
0
1
LANG:1 0 

9
"newPanelAnimDuration" "int 0"
"oldPanelAnimDuration" "int 0"
"newPanelAnimateOpacity" "bool TRUE"
"oldPanelAnimateOpacity" "bool TRUE"
"newPanelAnimateSize" "bool TRUE"
"oldPanelAnimateSize" "bool TRUE"
"newPanelAnimType" "string TopLeft"
"oldPanelAnimType" "string BottomRight"
"layoutAlignment" "AlignNone"
1
LANG:1 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  0 29 1919 1098
15 Canvas.Canvas.1
0
"main()
{
        this.ModuleName = \"embModuleN2\"; 
}" 0
0
LAYER, 3 
1
LANG:1 0 
29 40
"embModuleN3"
""
1 12 29 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
39 0 0 0 0 0
E E E
0
1
LANG:1 0 

9
"newPanelAnimDuration" "int 0"
"oldPanelAnimDuration" "int 0"
"newPanelAnimateOpacity" "bool TRUE"
"oldPanelAnimateOpacity" "bool TRUE"
"newPanelAnimateSize" "bool TRUE"
"oldPanelAnimateSize" "bool TRUE"
"newPanelAnimType" "string TopLeft"
"oldPanelAnimType" "string BottomRight"
"layoutAlignment" "AlignNone"
1
LANG:1 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  0 29 1919 1098
15 Canvas.Canvas.1
0
"main()
{
        this.ModuleName = \"embModuleN3\"; 
}" 0
0
LAYER, 4 
1
LANG:1 0 
29 41
"embModuleN4"
""
1 12 29 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
40 0 0 0 0 0
E E E
0
1
LANG:1 0 

9
"newPanelAnimDuration" "int 0"
"oldPanelAnimDuration" "int 0"
"newPanelAnimateOpacity" "bool TRUE"
"oldPanelAnimateOpacity" "bool TRUE"
"newPanelAnimateSize" "bool TRUE"
"oldPanelAnimateSize" "bool TRUE"
"newPanelAnimType" "string TopLeft"
"oldPanelAnimType" "string BottomRight"
"layoutAlignment" "AlignNone"
1
LANG:1 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  0 29 1919 1098
15 Canvas.Canvas.1
0
"main()
{
        this.ModuleName = \"embModuleN4\"; 
}" 0
0
LAYER, 5 
1
LANG:1 0 
29 42
"embModuleOverview"
""
1 12.06918238993711 27 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
41 0 0 0 0 0
E E E
0
1
LANG:1 0 

9
"newPanelAnimDuration" "int 0"
"oldPanelAnimDuration" "int 0"
"newPanelAnimateOpacity" "bool TRUE"
"oldPanelAnimateOpacity" "bool TRUE"
"newPanelAnimateSize" "bool TRUE"
"oldPanelAnimateSize" "bool TRUE"
"newPanelAnimType" "string TopLeft"
"oldPanelAnimType" "string BottomRight"
"layoutAlignment" "AlignNone"
1
LANG:1 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  0 27 1919 1096
15 Canvas.Canvas.1
0
"main()
{
          this.ModuleName = \"embModuleOverview\"; 
}" 0
0
LAYER, 6 
1
LANG:1 0 
6 43
"level2Background"
""
1 10 150 E E E 1 E 1 E N {236,236,236} E N {236,236,236} E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 2 1 E 0.2189723320158104 0 0.1876738052234745 1003.594861660079 880.9591898168054 1 E -5 30 1260 954
6 44
"setupBackground"
""
1 660 100 E E E 1 E 1 E N "_Transparent" E N {227,227,227} E E
 E E
43 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 1.267651888341543 0 1 -0.6765188834154312 -14.99999999999994 1 E 10 47 619 145
30 45
"FRAME9"
""
1 10 554 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
44 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.35438596491228 0 0.2694300518134714 -1.543859649122809 -123.264248704663 0 E 10 554 581 941
1
LANG:1 27 Utopia,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 8 Settings
13 46
"createHVSetupDptButton"
""
1 30 30 E E E 1 E 1 E N "_ButtonText" E N {236,236,236} E E
 E E
45 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
1
LANG:1 27 Utopia,-1,11,5,50,0,0,0,0,0
0  27.75 48.00000000000004 150.7500000000001 82

T 
1
LANG:1 14 Create HV DPTs
"main(mapping event)
{
  
dyn_dyn_string elements;
dyn_dyn_int types; 

// elements

elements[1]=makeDynString(\"HVSetup\",\"\");
types[1]=makeDynInt(DPEL_STRUCT);

elements[2]=makeDynString(\"\",\"Mapping\",\"\");
types[2]=makeDynInt(0,DPEL_STRUCT);
elements[3]=makeDynString(\"\",\"\",\"ChannelsTotal\",\"\");
types[3]=makeDynInt(0,0,DPEL_STRUCT);
elements[4]=makeDynString(\"\",\"\",\"\",\"Strips\");
types[4]=makeDynInt(0,0,0,DPEL_DYN_STRING);
elements[5]=makeDynString(\"\",\"\",\"\",\"Drift\");
types[5]=makeDynInt(0,0,0,DPEL_DYN_STRING);

int countGeneral=1;

string layer=\"L\";
int countLayer=1;
string leftRight=\"L\";
int countSector=1;

int count=6;

// Strips Validation MM

for(int i=1;i<=64;i++)
  {
  
  if(countGeneral==33)  
  {
    leftRight=\"R\";
    countLayer=1;
    countSector=1;
  }
  
  
   if(countLayer==5)
  {
   countLayer=1;
   countSector++;
   
  } 
  
  elements[count]=makeDynString(\"\",\"\",layer+countLayer+leftRight+countSector,\"\");
  types[count]=makeDynInt(0,0,DPEL_STRUCT);
  
  countLayer++;
  
  elements[count+1]=makeDynString(\"\",\"\",\"\",\"Channel\");
  types[count+1]=makeDynInt(0,0,0,DPEL_STRING);
  elements[count+2]=makeDynString(\"\",\"\",\"\",\"Alias\");
  types[count+2]=makeDynInt(0,0,0,DPEL_STRING);
  elements[count+3]=makeDynString(\"\",\"\",\"\",\"isVoltageGood\");    //Edit
  types[count+3]=makeDynInt(0,0,0,DPEL_INT);                    //Edit
  elements[count+4]=makeDynString(\"\",\"\",\"\",\"isCurrectGood\");    //Edit Current
  types[count+4]=makeDynInt(0,0,0,DPEL_INT);                     //Edit
  count=count+5;
  
  countGeneral++;
  }

string layer=\"L\";
int countLayer=1;

// Drift Validation MM

for(int i=1;i<=4;i++)
{
   elements[count]=makeDynString(\"\",\"\",layer+countLayer+\"D\",\"\");
   types[count]=makeDynInt(0,0,DPEL_STRUCT);
   elements[count+1]=makeDynString(\"\",\"\",\"\",\"Channel\");
   types[count+1]=makeDynInt(0,0,0,DPEL_STRING);
   elements[count+2]=makeDynString(\"\",\"\",\"\",\"Alias\");
   types[count+2]=makeDynInt(0,0,0,DPEL_STRING);
   count=count+3;
   countLayer++;  
}

string layer=\"L\";
int countLayer=1;
 // Strips Cosmics MM
for(int i=1;i<=4;i++)
{
   elements[count]=makeDynString(\"\",\"\",layer+countLayer+\"S\",\"\");
   types[count]=makeDynInt(0,0,DPEL_STRUCT);
   elements[count+1]=makeDynString(\"\",\"\",\"\",\"Channel\");
   types[count+1]=makeDynInt(0,0,0,DPEL_STRING);
   elements[count+2]=makeDynString(\"\",\"\",\"\",\"Alias\");
   types[count+2]=makeDynInt(0,0,0,DPEL_STRING);
   count=count+3;
   countLayer++; 
}

 // Drift Cosmics MM

     elements[count]=makeDynString(\"\",\"\",\"D\",\"\"); 
     types[count]=makeDynInt(0,0,DPEL_STRUCT);
     elements[count+1]=makeDynString(\"\",\"\",\"\",\"Channel\");
     types[count+1]=makeDynInt(0,0,0,DPEL_STRING);
     elements[count+2]=makeDynString(\"\",\"\",\"\",\"Alias\");
     types[count+2]=makeDynInt(0,0,0,DPEL_STRING);
     
      count=count+3;  
   
   
     elements[count]=makeDynString(\"\",\"Mode\"); 
     types[count]=makeDynInt(0,DPEL_STRING);
     elements[count+1]=makeDynString(\"\",\"Enabled\"); 
     types[count+1]=makeDynInt(0,DPEL_BOOL);
     elements[count+2]=makeDynString(\"\",\"ChamberType\"); 
     types[count+2]=makeDynInt(0,DPEL_STRING);   
     elements[count+3]=makeDynString(\"\",\"BatchId\"); 
     types[count+3]=makeDynInt(0,DPEL_STRING);  
     elements[count+4]=makeDynString(\"\",\"Archiving\",\"\"); 
     types[count+4]=makeDynInt(0,DPEL_STRUCT);      
     elements[count+5]=makeDynString(\"\",\"\",\"Status\"); 
     types[count+5]=makeDynInt(0,0,DPEL_BOOL);
     elements[count+6]=makeDynString(\"\",\"\",\"StartTime\"); 
     types[count+6]=makeDynInt(0,0,DPEL_STRING);
     elements[count+7]=makeDynString(\"\",\"\",\"EndTime\"); 
     types[count+7]=makeDynInt(0,0,DPEL_STRING);
     elements[count+8]=makeDynString(\"\",\"DpesToPlot\"); 
     types[count+8]=makeDynInt(0,DPEL_DYN_STRING);
     elements[count+9]=makeDynString(\"\",\"Configuration\"); 
     types[count+9]=makeDynInt(0,DPEL_BOOL);  
     elements[count+10]=makeDynString(\"\",\"BarGraphCounter\",\"\"); 
     types[count+10]=makeDynInt(0,DPEL_STRUCT); 
     
     elements[count+11]=makeDynString(\"\",\"\",\"L1\",\"\"); 
     types[count+11]=makeDynInt(0,0,DPEL_STRUCT);     
     elements[count+12]=makeDynString(\"\",\"\",\"\",\"Voltage\"); 
     types[count+12]=makeDynInt(0,0,0,DPEL_INT);
     elements[count+13]=makeDynString(\"\",\"\",\"\",\"Current\"); 
     types[count+13]=makeDynInt(0,0,0,DPEL_INT); 
 
      elements[count+14]=makeDynString(\"\",\"\",\"L2\",\"\"); 
     types[count+14]=makeDynInt(0,0,DPEL_STRUCT);     
     elements[count+15]=makeDynString(\"\",\"\",\"\",\"Voltage\"); 
     types[count+15]=makeDynInt(0,0,0,DPEL_INT);
     elements[count+16]=makeDynString(\"\",\"\",\"\",\"Current\"); 
     types[count+16]=makeDynInt(0,0,0,DPEL_INT);
 
      elements[count+17]=makeDynString(\"\",\"\",\"L3\",\"\"); 
     types[count+17]=makeDynInt(0,0,DPEL_STRUCT);     
     elements[count+18]=makeDynString(\"\",\"\",\"\",\"Voltage\"); 
     types[count+18]=makeDynInt(0,0,0,DPEL_INT);
     elements[count+19]=makeDynString(\"\",\"\",\"\",\"Current\"); 
     types[count+19]=makeDynInt(0,0,0,DPEL_INT);
 
      elements[count+20]=makeDynString(\"\",\"\",\"L4\",\"\"); 
     types[count+20]=makeDynInt(0,0,DPEL_STRUCT);     
     elements[count+21]=makeDynString(\"\",\"\",\"\",\"Voltage\"); 
     types[count+21]=makeDynInt(0,0,0,DPEL_INT);
     elements[count+22]=makeDynString(\"\",\"\",\"\",\"Current\"); 
     types[count+22]=makeDynInt(0,0,0,DPEL_INT);    
     
     elements[count+23]=makeDynString(\"\",\"Gas\",\"\"); 
     types[count+23]=makeDynInt(0,DPEL_STRUCT);      
     elements[count+24]=makeDynString(\"\",\"\",\"Inlet\"); 
     types[count+24]=makeDynInt(0,0,DPEL_FLOAT);  
     elements[count+25]=makeDynString(\"\",\"\",\"Outlet\"); 
     types[count+25]=makeDynInt(0,0,DPEL_FLOAT);      
     elements[count+26]=makeDynString(\"\",\"\",\"Leak\"); 
     types[count+26]=makeDynInt(0,0,DPEL_FLOAT);   
     elements[count+27]=makeDynString(\"\",\"\",\"Humidity\"); 
     types[count+27]=makeDynInt(0,0,DPEL_FLOAT); 
     elements[count+28]=makeDynString(\"\",\"\",\"Pressure\"); 
     types[count+28]=makeDynInt(0,0,DPEL_FLOAT); 
     
int x=dpTypeCreate(elements,types);

 if (x == 0){
    DebugN(\"Datapoint type creation succeeded!\");
    this.enabled(FALSE);
  }
  else {
    DebugN (\"Datapoint type creation returned an error!\");
  } 

    for(int i=1;i<=8;i++)
  {
  dpCreate(\"N\"+i,\"HVSetup\");

  }    
      


}" 0
 E E "main()
{
    
  if (searchDPTexistance(\"HVSetup\") == 0) {
    this.enabled = \"FALSE\";
  }
  else {
    this.enabled = \"TRUE\";  
  }
}
" 0

13 47
"hvSetup"
""
1 165 30 E E E 1 E 1 E N "_ButtonText" E N {236,236,236} E E
 E E
46 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
1
LANG:1 27 Utopia,-1,11,5,50,0,0,0,0,0
0  162.75 48.00000000000001 285.7499999999999 82.00000000000001

T 
1
LANG:1 8 Setup HV
"main(mapping event)
{
    ChildPanelOnCentral(\"objects/setupHV.pnl\", \"\", makeDynString(\"\")); 
}" 0
 E E E
6 50
"configureBackground"
""
1 660 100 E E E 1 E 1 E N "_Transparent" E N {227,227,227} E E
 E E
49 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 1.265570358147222 0 1 -0.6557035814722204 -19.99999999999994 1 E 10 155 619 941
30 61
"configureFrame"
""
1 540 364 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
60 0 0 0 0 0
E E E
1
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.087323943661972 0 1.375 -575.1549295774645 -370.5000000000001 0 E 540 364 1251 941
1
LANG:1 27 Utopia,-1,11,5,50,0,0,0,0,0
0 1
LANG:1 21 Configure HV channels
13 99
"acceptanceButton"
""
1 308.2773109243699 47.66666666666664 E E E 1 E 1 E N "_ButtonText" E N {236,236,236} E E
 E E
98 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
1
LANG:1 27 Utopia,-1,11,5,50,0,0,0,0,0
0  306.0000000000002 65.66666666666669 441.9999999999999 99.66666666666667

T 
1
LANG:1 21 Set Acceptance Limits
"main(mapping event)
{
    ChildPanelOnCentral(\"objects/setupAcceptanceLimits.pnl\", \"\", makeDynString(\"\")); 
}" 0
 E E E
13 100
"createHVSetupPlusDptButton"
""
1 29.875 65.00000000000001 E E E 1 E 1 E N "_ButtonText" E N {236,236,236} E E
 E E
99 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
1
LANG:1 27 Utopia,-1,11,5,50,0,0,0,0,0
0  27.625 83.00000000000004 150.6250000000001 117

T 
1
LANG:1 15 Create HV+ DPTs
"main(mapping event)
{
  
dyn_dyn_string elements;
dyn_dyn_int types; 

// elements

elements[1]=makeDynString(\"HVSetupStatus\",\"\");
types[1]=makeDynInt(DPEL_STRUCT);

elements[2]=makeDynString(\"\",\"Mode\");
types[2]=makeDynInt(0,DPEL_STRING);
elements[3]=makeDynString(\"\",\"Archiving\");
types[3]=makeDynInt(0,DPEL_BOOL);
elements[4]=makeDynString(\"\",\"AcceptanceLimits\",\"\");
types[4]=makeDynInt(0,DPEL_STRUCT);
elements[5]=makeDynString(\"\",\"\",\"Voltage\");
types[5]=makeDynInt(0,0,DPEL_STRUCT);
elements[6]=makeDynString(\"\",\"\",\"\",\"downLimit\");
types[6]=makeDynInt(0,0,0,DPEL_FLOAT);
elements[7]=makeDynString(\"\",\"\",\"\",\"upLimit\");
types[7]=makeDynInt(0,0,0,DPEL_FLOAT);
elements[8]=makeDynString(\"\",\"\",\"Current\");
types[8]=makeDynInt(0,0,DPEL_STRUCT);
elements[9]=makeDynString(\"\",\"\",\"\",\"downLimit\");
types[9]=makeDynInt(0,0,0,DPEL_FLOAT);
elements[10]=makeDynString(\"\",\"\",\"\",\"upLimit\");
types[10]=makeDynInt(0,0,0,DPEL_FLOAT);

elements[11]=makeDynString(\"\",\"ExtraMode\",\"\");
types[11]=makeDynInt(0,DPEL_STRUCT);
elements[12]=makeDynString(\"\",\"\",\"Env\");
types[12]=makeDynInt(0,0,DPEL_BOOL);
elements[13]=makeDynString(\"\",\"\",\"Gas\");
types[13]=makeDynInt(0,0,DPEL_BOOL);
elements[14]=makeDynString(\"\",\"\",\"MMHumidity\");
types[14]=makeDynInt(0,0,DPEL_BOOL);
elements[15]=makeDynString(\"\",\"\",\"GIF\");
types[15]=makeDynInt(0,0,DPEL_BOOL);

int x=dpTypeCreate(elements,types);

 if (x == 0){
    DebugN(\"Datapoint type creation succeeded!\");
    this.enabled(FALSE);
  }
  else {
    DebugN (\"Datapoint type creation returned an error!\");
  } 


  dpCreate(\"ALL\",\"HVSetupStatus\");
   
      


}" 0
 E E "main()
{
    
  if (searchDPTexistance(\"HVSetupStatus\") == 0) {
    this.enabled = \"FALSE\";
  }
  else {
    this.enabled = \"TRUE\";  
  }
}
" 0

13 106
"createHVEnvDptButton"
""
1 165 66 E E E 1 E 1 E N "_ButtonText" E N {236,236,236} E E
 E E
105 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
1
LANG:1 27 Utopia,-1,11,5,50,0,0,0,0,0
0  162.75 84.00000000000003 285.7500000000001 118

T 
1
LANG:1 15 Create Env DPTs
"main(mapping event)
{
  dyn_dyn_string elements;
  dyn_dyn_int types;
  
  // Elements // 

elements[1]=makeDynString(\"Arduino\",\"\");

elements[2]=makeDynString(\"\",\"pressureMon\");
elements[3]=makeDynString(\"\",\"pressureMean\");
elements[4]=makeDynString(\"\",\"temperatureMon\");
elements[5]=makeDynString(\"\",\"temperatureMean\");
elements[6]=makeDynString(\"\",\"humidityMon\");
elements[7]=makeDynString(\"\",\"humidityMean\");
elements[8]=makeDynString(\"\",\"archiving\");
elements[9]=makeDynString(\"\",\"samplingTime\");


//// Types  /////

types[1]=makeDynInt(DPEL_STRUCT);

types[2]=makeDynInt(0,DPEL_FLOAT);
types[3]=makeDynInt(0,DPEL_FLOAT);
types[4]=makeDynInt(0,DPEL_FLOAT);
types[5]=makeDynInt(0,DPEL_FLOAT);
types[6]=makeDynInt(0,DPEL_FLOAT);
types[7]=makeDynInt(0,DPEL_FLOAT);
types[8]=makeDynInt(0,DPEL_BOOL);
types[9]=makeDynInt(0,DPEL_INT);



int x=dpTypeCreate(elements,types);

 if (x == 0){
    DebugN(\"Datapoint type creation succeeded!\");
    this.enabled(FALSE);
  }
  else {
    DebugN (\"Datapoint type creation returned an error!\");
  }
  
dpCreate(\"BME280\",\"Arduino\");


}" 0
 E E "main()
{
    
  if (searchDPTexistance(\"Arduino\") == 0) {
    this.enabled = \"FALSE\";
  }
  else {
    this.enabled = \"TRUE\";  
  }
}
" 0

0
LAYER, 7 
1
LANG:1 0 
6 27
"titleBackground"
""
1 0 40 E E E 1 E 1 E N "STD_grey_dark" E N {255,255,255} E E
 E E
26 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 2 0 1 E 3.014925373134329 0 0.925 -10.00000000000011 -11 4 "[conical,-1.18,1.23,153,0,{0,0,0},0.762,{255,255,255}]" E 0 40 670 0
2 28
"TitleTBSCS"
""
1 84 84 E E E 1 E 1 E N "FwAtlasBg" E N "FwAtlasBg" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 14 -2 136 25
0 2 2 "0s" 0 0 0 193 0 0  75 -2 1
1
LANG:1 27 Utopia,-1,24,5,75,0,0,0,0,0
0 1
LANG:1 10 HV Station
15 29
"clk"
""
1 1758 6 E E E 1 E 1 E N "STD_textfield_text" E N {236,236,236} E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
1
LANG:1 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  1739 3 1892 23
E 1 1 "%X" "%x"
1 1 1 1
1
LANG:1 27 Utopia,-1,13,5,50,0,0,0,0,0
0  1
LANG:1 27 Utopia,-1,13,5,50,0,0,0,0,0
0 
13 30
"buttonN2"
""
1 367.5000000000001 68 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
29 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  437.9999999999997 -8.881784197001252e-16 541 25

T 
1
LANG:1 10 Node 2-XMX
"main(mapping event)
{
  enabledAllTabButtons();
  currentLayer(3);
}" 0
 E E E
13 31
"buttonN3"
""
1 478.2500000000001 68 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
30 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  547.9999999999999 -8.881784197001252e-16 650.9999999999999 25

T 
1
LANG:1 10 Node 3-XMX
"main(mapping event)
{
  enabledAllTabButtons();
  currentLayer(4);
}" 0
 E E E
13 32
"buttonN4"
""
1 587.7500000000001 68 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
31 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  657.9999999999998 -8.881784197001252e-16 760.9999999999999 25

T 
1
LANG:1 10 Node 4-XMX
"main(mapping event)
{
  enabledAllTabButtons();
  currentLayer(5);
}" 0
 E E E
13 33
"buttonN1"
""
1 239.7721518987345 68 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
32 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  327.9999999999999 -8.881784197001252e-16 430.9999999999997 25

T 
1
LANG:1 10 Node 1-XMX
"main(mapping event)
{
  enabledAllTabButtons();
  currentLayer(2);
}" 0
 E E E
13 34
"buttonOverview"
""
1 717.8750000000001 68 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
33 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  787.8749999999999 -8.881784197001252e-16 900.8749999999998 25

T 
1
LANG:1 8 Overview
"main(mapping event)
{
  enabledAllTabButtons();
  currentLayer(6);
}" 0
 E E E
13 35
"buttonSettings"
""
1 1230 68 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
34 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  1300 -8.881784197001252e-16 1413 25

T 
1
LANG:1 8 Settings
"main(mapping event)
{
  enabledAllTabButtons();
  currentLayer(7);
}" 0
 E E E
13 36
"buttonExit"
""
1 1531 68 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
35 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  1601 -8.881784197001252e-16 1714 25

T 
1
LANG:1 4 Exit
"main(mapping event)
{
  PanelOff();
}" 0
 E E E
13 74
"buttonSetup"
""
1 84 68 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
73 0 0 0 0 0
E E E
8
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 27 Utopia,-1,16,5,75,0,0,0,0,0
0  154 -8.881784197001252e-16 266.9999999999997 25

T 
1
LANG:1 5 Setup
"main(mapping event)
{
  enabledAllTabButtons();
  currentLayer(1);
}" 0
 E E E
0
1 0 "SHAPE_GROUP9" -1
4 0 
131 132 133 134 

"layoutAlignment" "AlignNone"
"" ""
0
